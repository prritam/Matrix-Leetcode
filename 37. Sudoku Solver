class Solution {
public:
    bool isValid(vector<vector<char>>&board,int m,int n,char num){
       for(int i=0;i<9;i++)
       {
            if(board[m][i]==num || board[i][n]==num){
                return false;
            }
       }
       int startRow=(m/3)*3;
       int startCol=(n/3)*3;
       for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(board[startRow+i][startCol+j]==num){
                return false;
            }
        }
       }
       return true;
    }
    bool solve(vector<vector<char>>&board)
    {
        int m=board.size();
        int n=board[0].size();

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(board[i][j]=='.')
                {
                    for(char num='1';num<='9';num++)
                    {
                        if(isValid(board,i,j,num))
                        {
                            board[i][j]=num;
                            if(solve(board))
                            {
                                return true;
                            }
                            board[i][j]='.';
                        }
                    }
                     return false;
                }
               
            }
        }
        return true; 
    }
    void solveSudoku(vector<vector<char>>& board) {
         solve(board);
    }
};
